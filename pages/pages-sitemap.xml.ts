import { GetServerSideProps } from 'next';

const Sitemap = () => {
  return null; // Kh√¥ng c·∫ßn hi·ªÉn th·ªã g√¨
};

export const getServerSideProps: GetServerSideProps = async ({ res }) => {
  const apiUrl = process.env.NEXT_PUBLIC_API_URL || "http://localhost:4000";
  
  console.log("üåç Pages sitemap: Generating sitemap...");
  console.log("üîó API URL:", apiUrl);

  try {
    // Fetch data t·ª´ backend APIs
    const [productsRes, categoriesRes, customSitemapsRes] = await Promise.all([
      fetch(`${apiUrl}/api/products`).catch(() => null),
      fetch(`${apiUrl}/api/categories`).catch(() => null),
      fetch(`${apiUrl}/api/custom-sitemaps`).catch(() => null)
    ]);

    let allUrls: string[] = [];
    const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || "http://localhost:3000";
    
    // Homepage v√† static pages
    allUrls.push(`
  <url>
    <loc>${baseUrl}</loc>
    <lastmod>${new Date().toISOString()}</lastmod>
    <changefreq>daily</changefreq>
    <priority>1.0</priority>
  </url>`);

    allUrls.push(`
  <url>
    <loc>${baseUrl}/products</loc>
    <lastmod>${new Date().toISOString()}</lastmod>
    <changefreq>daily</changefreq>
    <priority>0.9</priority>
  </url>`);

    // Products t·ª´ API
    if (productsRes?.ok) {
      const productsData = await productsRes.json();
      if (productsData.success && Array.isArray(productsData.data?.products)) {
        const products = productsData.data.products;
        console.log(`‚úÖ Found ${products.length} products`);
        
        products.forEach((product: any) => {
          const lastmod = product.updated_at 
            ? new Date(product.updated_at).toISOString()
            : new Date().toISOString();
            
          allUrls.push(`
  <url>
    <loc>${baseUrl}/products/${product.id}</loc>
    <lastmod>${lastmod}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.8</priority>
  </url>`);
        });
      }
    }

    // Categories t·ª´ API
    if (categoriesRes?.ok) {
      const categoriesData = await categoriesRes.json();
      if (categoriesData.success && Array.isArray(categoriesData.data)) {
        const categories = categoriesData.data;
        console.log(`‚úÖ Found ${categories.length} categories`);
        
        categories.forEach((category: any) => {
          const lastmod = category.updated_at 
            ? new Date(category.updated_at).toISOString()
            : new Date().toISOString();
            
          allUrls.push(`
  <url>
    <loc>${baseUrl}/category/${category.slug}</loc>
    <lastmod>${lastmod}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.7</priority>
  </url>`);
        });
      }
    }

    // Custom URLs t·ª´ API
    if (customSitemapsRes?.ok) {
      const customData = await customSitemapsRes.json();
      if (customData.success && Array.isArray(customData.data)) {
        const customUrls = customData.data;
        console.log(`‚úÖ Found ${customUrls.length} custom URLs`);
        
        customUrls.forEach((sitemap: any) => {
          const lastmod = sitemap.last_modified || sitemap.updated_at 
            ? new Date(sitemap.last_modified || sitemap.updated_at).toISOString()
            : new Date().toISOString();
            
          allUrls.push(`
  <url>
    <loc>${sitemap.url}</loc>
    <lastmod>${lastmod}</lastmod>
    <changefreq>${sitemap.changefreq || "monthly"}</changefreq>
    <priority>0.2</priority>
  </url>`);
        });
      }
    }

    // T·∫°o XML sitemap
    const xml = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <!-- Generated by Pages Router at ${new Date().toISOString()} -->
  <!-- Total URLs: ${allUrls.length} -->
${allUrls.join('\n')}
</urlset>`;

    console.log(`üìÑ Generated sitemap with ${allUrls.length} URLs`);

    // Set headers v√† tr·∫£ v·ªÅ XML
    res.setHeader('Content-Type', 'application/xml; charset=utf-8');
    res.setHeader('Cache-Control', 'public, max-age=3600, s-maxage=7200');
    res.setHeader('Last-Modified', new Date().toUTCString());
    res.write(xml);
    res.end();

  } catch (error) {
    console.error("‚ùå Error generating sitemap:", error);
    
    // Fallback sitemap
    const fallbackXml = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <!-- Fallback sitemap - ${new Date().toISOString()} -->
  <url>
    <loc>${process.env.NEXT_PUBLIC_SITE_URL || "http://localhost:3000"}</loc>
    <lastmod>${new Date().toISOString()}</lastmod>
    <changefreq>daily</changefreq>
    <priority>1.0</priority>
  </url>
</urlset>`;

    res.setHeader('Content-Type', 'application/xml; charset=utf-8');
    res.setHeader('Cache-Control', 'public, max-age=1800');
    res.write(fallbackXml);
    res.end();
  }

  return {
    props: {}, // Kh√¥ng c·∫ßn props
  };
};

export default Sitemap;
