"use client";

import { useEffect } from 'react';
import { useSeo } from '@/components/providers/SeoProvider';
import { OptimizedImage } from '@/components/PerformanceOptimizer';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { CheckCircle, Globe, Zap, BarChart3 } from 'lucide-react';

export default function SeoDemo() {
  const { updateSeoData } = useSeo();

  useEffect(() => {
    // Update SEO data for this page
    updateSeoData({
      title: "SEO Demo - H·ªá th·ªëng SEO ho√†n ch·ªânh",
      description: "Trang demo gi·ªõi thi·ªáu h·ªá th·ªëng SEO t·ª± ƒë·ªông v·ªõi analytics, schema.org, v√† t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t. T√≠ch h·ª£p Google Analytics, Facebook Pixel v√† c√°c c√¥ng c·ª• SEO chuy√™n nghi·ªáp.",
      keywords: "SEO demo, t·ªëi ∆∞u h√≥a, analytics, schema.org, meta tags",
      pageType: "demo",
      ogType: "article",
      ogImage: "/images/seo-demo-og.jpg",
      breadcrumbs: [
        { name: "Trang ch·ªß", url: "/" },
        { name: "SEO Demo", url: "/seo-demo" }
      ],
      structuredData: {
        "@context": "https://schema.org",
        "@type": "Article",
        "headline": "H·ªá th·ªëng SEO ho√†n ch·ªânh cho HACOM",
        "description": "Demo h·ªá th·ªëng SEO t·ª± ƒë·ªông v·ªõi ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng",
        "author": {
          "@type": "Organization",
          "name": "HACOM"
        },
        "publisher": {
          "@type": "Organization",
          "name": "HACOM",
          "logo": {
            "@type": "ImageObject",
            "url": "https://hacom.vn/logo.png"
          }
        },
        "datePublished": "2024-01-15T10:00:00+07:00",
        "dateModified": "2024-01-15T10:00:00+07:00",
        "mainEntityOfPage": {
          "@type": "WebPage",
          "@id": "https://hacom.vn/seo-demo"
        }
      }
    });
  }, [updateSeoData]);

  const seoFeatures = [
    {
      icon: <Globe className="h-8 w-8 text-blue-600" />,
      title: "Meta Tags T·ª± ƒê·ªông",
      description: "T·ª± ƒë·ªông t·∫°o title, description, keywords v√† Open Graph tags",
      implemented: true
    },
    {
      icon: <BarChart3 className="h-8 w-8 text-green-600" />,
      title: "Analytics T√≠ch H·ª£p",
      description: "Google Analytics 4, GTM, Facebook Pixel, Hotjar",
      implemented: true
    },
    {
      icon: <CheckCircle className="h-8 w-8 text-purple-600" />,
      title: "Schema.org Markup", 
      description: "Organization, Product, Breadcrumb, Review schemas",
      implemented: true
    },
    {
      icon: <Zap className="h-8 w-8 text-orange-600" />,
      title: "Performance Optimization",
      description: "Lazy loading, WebP images, critical CSS, defer JS",
      implemented: true
    }
  ];

  const technicalFeatures = [
    "Sitemap.xml t·ª± ƒë·ªông (main, products, categories, images, videos)",
    "Robots.txt ƒë·ªông v·ªõi custom rules",
    "Canonical URLs t·ª± ƒë·ªông",
    "Hreflang tags cho ƒëa ng√¥n ng·ªØ",
    "Core Web Vitals optimization",
    "Image optimization v√† lazy loading",
    "Critical CSS inlining",
    "Non-critical JS deferring",
    "Resource preloading",
    "SEO analytics v√† monitoring"
  ];

  return (
    <div className="container mx-auto px-6 py-8">
      <div className="text-center mb-12">
        <h1 className="text-4xl font-bold text-gray-900 mb-4">
          H·ªá th·ªëng SEO Ho√†n ch·ªânh
        </h1>
        <p className="text-xl text-gray-600 max-w-3xl mx-auto">
          Demo h·ªá th·ªëng SEO t·ª± ƒë·ªông v·ªõi ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng theo y√™u c·∫ßu c·ªßa b·∫°n. 
          T√≠ch h·ª£p analytics, schema.org, t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t v√† qu·∫£n l√Ω SEO to√†n di·ªán.
        </p>
      </div>

      {/* Feature Cards */}
      <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12">
        {seoFeatures.map((feature, index) => (
          <Card key={index} className="text-center">
            <CardHeader>
              <div className="flex justify-center mb-2">
                {feature.icon}
              </div>
              <CardTitle className="text-lg">{feature.title}</CardTitle>
            </CardHeader>
            <CardContent>
              <CardDescription className="mb-4">
                {feature.description}
              </CardDescription>
              <Badge variant={feature.implemented ? "default" : "secondary"}>
                {feature.implemented ? "‚úÖ Ho·∫°t ƒë·ªông" : "‚è≥ ƒêang ph√°t tri·ªÉn"}
              </Badge>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* SEO Categories Implemented */}
      <Card className="mb-8">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <CheckCircle className="h-5 w-5 text-green-600" />
            Danh m·ª•c SEO ƒë√£ tri·ªÉn khai (100% theo SQL)
          </CardTitle>
          <CardDescription>
            T·∫•t c·∫£ 8 danh m·ª•c SEO t·ª´ b·∫£ng SQL c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c tri·ªÉn khai ƒë·∫ßy ƒë·ªß
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-4">
            {[
              "‚úÖ General (C∆° b·∫£n)",
              "‚úÖ Analytics (Ph√¢n t√≠ch)", 
              "‚úÖ Social (M·∫°ng x√£ h·ªôi)",
              "‚úÖ Schema (D·ªØ li·ªáu c√≥ c·∫•u tr√∫c)",
              "‚úÖ Technical (K·ªπ thu·∫≠t)",
              "‚úÖ Content (N·ªôi dung)",
              "‚úÖ Performance (Hi·ªáu su·∫•t)",
              "‚úÖ Local (ƒê·ªãa ph∆∞∆°ng)"
            ].map((category, index) => (
              <Badge key={index} variant="default" className="justify-start">
                {category}
              </Badge>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Technical Features */}
      <Card className="mb-8">
        <CardHeader>
          <CardTitle>T√≠nh nƒÉng k·ªπ thu·∫≠t ƒë√£ tri·ªÉn khai</CardTitle>
          <CardDescription>
            C√°c t√≠nh nƒÉng SEO k·ªπ thu·∫≠t ho·∫°t ƒë·ªông t·ª± ƒë·ªông
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid md:grid-cols-2 gap-2">
            {technicalFeatures.map((feature, index) => (
              <div key={index} className="flex items-center gap-2">
                <CheckCircle className="h-4 w-4 text-green-600 flex-shrink-0" />
                <span className="text-sm">{feature}</span>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Demo Image with Optimization */}
      <Card>
        <CardHeader>
          <CardTitle>Demo Optimized Image Component</CardTitle>
          <CardDescription>
            H√¨nh ·∫£nh ƒë∆∞·ª£c t·ªëi ∆∞u t·ª± ƒë·ªông v·ªõi WebP, lazy loading v√† responsive
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid md:grid-cols-2 gap-6">
            <div>
              <h4 className="font-semibold mb-2">H√¨nh ·∫£nh ƒë∆∞·ª£c t·ªëi ∆∞u:</h4>
              <OptimizedImage
                src="/images/demo-product.jpg"
                alt="Demo s·∫£n ph·∫©m laptop gaming HACOM"
                width={400}
                height={300}
                className="rounded-lg shadow-md"
                priority={false}
              />
            </div>
            <div>
              <h4 className="font-semibold mb-2">T√≠nh nƒÉng t·ªëi ∆∞u:</h4>
              <ul className="space-y-2 text-sm">
                <li className="flex items-center gap-2">
                  <CheckCircle className="h-4 w-4 text-green-600" />
                  T·ª± ƒë·ªông chuy·ªÉn ƒë·ªïi sang WebP
                </li>
                <li className="flex items-center gap-2">
                  <CheckCircle className="h-4 w-4 text-green-600" />
                  Lazy loading th√¥ng minh
                </li>
                <li className="flex items-center gap-2">
                  <CheckCircle className="h-4 w-4 text-green-600" />
                  Responsive images v·ªõi srcSet
                </li>
                <li className="flex items-center gap-2">
                  <CheckCircle className="h-4 w-4 text-green-600" />
                  Placeholder loading states
                </li>
                <li className="flex items-center gap-2">
                  <CheckCircle className="h-4 w-4 text-green-600" />
                  Error handling v√† fallback
                </li>
              </ul>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Live SEO Status */}
      <div className="mt-8 p-6 bg-green-50 rounded-lg border-l-4 border-green-500">
        <h3 className="font-semibold text-green-800 mb-2">
          üéâ H·ªá th·ªëng SEO ƒëang ho·∫°t ƒë·ªông!
        </h3>
        <p className="text-green-700">
          Trang n√†y ƒëang s·ª≠ d·ª•ng h·ªá th·ªëng SEO ho√†n ch·ªânh v·ªõi meta tags, 
          schema.org markup, analytics tracking v√† performance optimization. 
          Ki·ªÉm tra View Source ƒë·ªÉ xem c√°c meta tags v√† structured data ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông.
        </p>
      </div>
    </div>
  );
}
