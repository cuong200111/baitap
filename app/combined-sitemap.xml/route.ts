import { NextRequest, NextResponse } from "next/server";

// Escape XML special characters
function escapeXml(unsafe: string) {
  if (!unsafe) return "";
  return unsafe
    .toString()
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&apos;");
}

export async function GET(request: NextRequest) {
  const apiUrl = process.env.NEXT_PUBLIC_API_URL || "http://localhost:4000";
  const baseUrl = `${request.nextUrl.protocol}//${request.nextUrl.host}`;
  
  console.log("üåç Combined sitemap: Generating with getServerSideProps approach...");
  console.log("üîó API URL:", apiUrl);

  try {
    // Fetch t·∫•t c·∫£ data t·ª´ backend APIs (nh∆∞ getServerSideProps)
    const [productsRes, categoriesRes, customSitemapsRes] = await Promise.all([
      fetch(`${apiUrl}/api/products`).catch(() => null),
      fetch(`${apiUrl}/api/categories`).catch(() => null),
      fetch(`${apiUrl}/api/custom-sitemaps`).catch(() => null)
    ]);

    let allUrls: string[] = [];
    
    // 1. Homepage v√† static pages
    allUrls.push(`  <url>
    <loc>${escapeXml(baseUrl)}</loc>
    <lastmod>${new Date().toISOString()}</lastmod>
    <changefreq>daily</changefreq>
    <priority>1.0</priority>
    <mobile:mobile/>
  </url>`);

    allUrls.push(`  <url>
    <loc>${escapeXml(baseUrl)}/products</loc>
    <lastmod>${new Date().toISOString()}</lastmod>
    <changefreq>daily</changefreq>
    <priority>0.9</priority>
    <mobile:mobile/>
  </url>`);

    // 2. Products t·ª´ API
    if (productsRes?.ok) {
      const productsData = await productsRes.json();
      if (productsData.success && Array.isArray(productsData.data?.products)) {
        const products = productsData.data.products;
        console.log(`‚úÖ Found ${products.length} products`);
        
        products.forEach((product: any) => {
          const lastmod = product.updated_at 
            ? new Date(product.updated_at).toISOString()
            : new Date().toISOString();
            
          allUrls.push(`  <url>
    <loc>${escapeXml(baseUrl)}/products/${product.id}</loc>
    <lastmod>${lastmod}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.8</priority>
    <mobile:mobile/>
  </url>`);
        });
      }
    }

    // 3. Categories t·ª´ API
    if (categoriesRes?.ok) {
      const categoriesData = await categoriesRes.json();
      if (categoriesData.success && Array.isArray(categoriesData.data)) {
        const categories = categoriesData.data;
        console.log(`‚úÖ Found ${categories.length} categories`);
        
        categories.forEach((category: any) => {
          const lastmod = category.updated_at 
            ? new Date(category.updated_at).toISOString()
            : new Date().toISOString();
            
          allUrls.push(`  <url>
    <loc>${escapeXml(baseUrl)}/category/${escapeXml(category.slug)}</loc>
    <lastmod>${lastmod}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.7</priority>
    <mobile:mobile/>
  </url>`);
        });
      }
    }

    // 4. Custom URLs t·ª´ API
    if (customSitemapsRes?.ok) {
      const customData = await customSitemapsRes.json();
      if (customData.success && Array.isArray(customData.data)) {
        const customUrls = customData.data;
        console.log(`‚úÖ Found ${customUrls.length} custom URLs`);
        
        customUrls.forEach((sitemap: any) => {
          const lastmod = sitemap.last_modified || sitemap.updated_at 
            ? new Date(sitemap.last_modified || sitemap.updated_at).toISOString()
            : new Date().toISOString();
            
          allUrls.push(`  <url>
    <loc>${escapeXml(sitemap.url)}</loc>
    <lastmod>${lastmod}</lastmod>
    <changefreq>${sitemap.changefreq || "monthly"}</changefreq>
    <priority>0.2</priority>
    <mobile:mobile/>
  </url>`);
        });
      }
    }

    // 5. T·∫°o XML sitemap (nh∆∞ getServerSideProps style)
    const xml = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"
        xmlns:mobile="http://www.google.com/schemas/sitemap-mobile/1.0">
  <!-- Generated by getServerSideProps approach at ${new Date().toISOString()} -->
  <!-- Total URLs: ${allUrls.length} -->
${allUrls.join('\n')}
</urlset>`;

    console.log(`üìÑ Generated combined sitemap with ${allUrls.length} URLs`);

    // Return XML response v·ªõi headers t·ªëi ∆∞u
    return new NextResponse(xml, {
      status: 200,
      headers: {
        "Content-Type": "application/xml; charset=utf-8",
        "Cache-Control": "public, max-age=3600, s-maxage=7200",
        "Last-Modified": new Date().toUTCString(),
        "X-Robots-Tag": "noindex, nofollow",
        "Vary": "Accept-Encoding",
      },
    });

  } catch (error) {
    console.error("‚ùå Error generating combined sitemap:", error);
    
    // Fallback sitemap
    const fallbackXml = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <!-- Fallback sitemap - ${new Date().toISOString()} -->
  <url>
    <loc>${escapeXml(baseUrl)}</loc>
    <lastmod>${new Date().toISOString()}</lastmod>
    <changefreq>daily</changefreq>
    <priority>1.0</priority>
  </url>
</urlset>`;

    return new NextResponse(fallbackXml, {
      status: 200,
      headers: {
        "Content-Type": "application/xml; charset=utf-8",
        "Cache-Control": "public, max-age=1800",
      },
    });
  }
}
